// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  oauth_token         String? @db.Text
  oauth_token_secret  String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String?
  email         String   @unique
  emailVerified DateTime?
  password      String?  // needs to be optional for next-auth providers
  image         String?
  accounts      Account[]
  sessions      Session[]
  schedules     Schedule[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Schedule {
  id             String   @id @default(cuid())
  name           String
  description    String?
  startDate      DateTime @db.DateTime()
  endDate        DateTime @db.DateTime()
  startTime      String
  endTime        String
  deadline       DateTime?
  numberOfEvents Int      @db.UnsignedTinyInt
  lengthOfEvents String
  userId         String
  host           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @db.Timestamp(0) @default(now())
  events         Event[]
  attendees      Json? 
  // {
  //   "user": {
  //     "day": ["time"]
  //   }
  // }
}

model Event {
  id          String @id @default(cuid())
  name        String
  date        DateTime
  startTime   String
  endTime     String
  scheduleId  String
  description String?
  location    String?
  schedule    Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}